Цель этого примера — продемонстрировать подход к решению проблемы для реального пользователя.
Ниже приведено описание сценария с некоторыми техническими требованиями.
Однако вам решать, как вы собираетесь решать проблему и каким будет окончательный результат.
техническое решение (приложение) будет выглядеть так.
Качество решения (например, качество кода) важно.

*** Сценарий ***

— Заказчику нужна небольшая утилита (написанная на C# и WPF) для обработки текстового файла.
- Пользовательский интерфейс должен позволять пользователю указывать текстовый файл для обработки.
- Этот файл должен быть проанализирован, и все слова в файле должны быть извлечены и подсчитаны.
- В результате должна быть показана простая таблица из двух столбцов.
- Первый столбец должен содержать слова, а второй — их вхождения.
- Таблица должна быть отсортирована по количеству вхождений.
- Пользователь будет видеть прогресс
- Пользователь имеет возможность отменить обработку файла.

*** Технические требования ***

- Программа должна читать текстовый файл ANSI. Файл для чтения задается пользователем.
- Разделение слов в текстовом файле осуществляется только с помощью пробельных символов.
(пробел, LR, CR, ...). Работа со знаками препинания выходит за рамки данного задания.
- Следует учитывать, что большие текстовые файлы (~50 МБ) будут обрабатываться, поэтому
пользовательский интерфейс должен отображать индикатор выполнения.
- Должна быть возможность прервать программу во время анализа текстового файла.
- Логика анализа файла, отвечающая за извлечение слов из входного файла, должна быть
модульный и многоразовый. Это связано с тем, что эта логика предназначена для повторного использования в будущем проекте.
- Желательно, чтобы анализ файла обеспечивал достойную производительность.
- Пользовательский интерфейс должен быть отзывчивым даже во время анализа файла, чтобы пользователь
  может по-прежнему взаимодействовать с приложением (например, когда он/она хочет отменить обработку файла).
 
В качестве примера можно использовать прикрепленный файл Sample.txt. Учитывая следующий ввод:

1:1 Адам Сет Энос
1:2 Каинан Адам Сет Иаред

программа должна отобразить содержимое таблицы ниже

Встречаемость слов
Адам 2
Сет 2
1:1 1
Энос 1
1:2 1
Кайнан 1
Иаред 1

* При отправке исходного кода удалите сгенерированные временные и/или бинарные файлы из
решение, гарантирующее, что наша почтовая система принимает вложение
(например, папки «bin» и «obj» для решения C#). Если возникнут проблемы, поделитесь решением
используя некоторые доступные платформы (например, GitHub, Google Drive, Dropbox или аналогичные).